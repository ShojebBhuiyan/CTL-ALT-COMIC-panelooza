// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  styles        Style[]
  projects      Project[]
}

model Style {
  id             String   @id @default(cuid())
  userId         String
  thumbnail      String
  label          String
  family         String?
  color          String?
  llmPrompt      String?
  imagePrompt    String[]
  negativePrompt String[]
  isDefault      Boolean  @default(true)
  imagePaths     String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([label, userId])
}

model Project {
  id             String          @id @default(cuid())
  userId         String
  name           String
  description    String?
  thumbnail      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  renderedScenes RenderedScene[]
  user           User            @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model RenderedScene {
  id            String         @id @default(cuid())
  renderId      String
  status        String
  assetUrl      String
  alt           String
  error         String
  maskUrl       String
  imageSegments ImageSegment[]
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ImageSegment {
  id              String        @id @default(cuid())
  box             Float[]
  color           Float[]
  label           String
  score           Float[]
  renderedScene   RenderedScene @relation(fields: [renderedSceneId], references: [id])
  renderedSceneId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
